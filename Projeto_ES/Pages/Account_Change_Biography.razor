@page "/account/settings/bio"
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IJSRuntime JsRuntime
@inject IUserData _db
@inject IPlaylistData _dbp

<style>
    body {
        background: linear-gradient( rgba(255, 255, 255, 0.4), rgba(255, 255, 255, 0.4) ), url("images/image1.png") no-repeat center center fixed;
        background-size: cover;
    }
</style>

<PageTitle>Changing Biography</PageTitle>

<div>
    @if (userlogged != null)
    {
        <p>Teste contudo</p>
        <ul class="navbar-nav pe-5">
            <li class="nav-item pe-2">
                 <button type="button" href="/account/settings" class="btn btn-secondary" @onclick="EditBiography" >
                    <i class="fa-solid fa-gear"></i>
                    Change Biography
                </button>
            </li>
            <li class="nav-item">
                <button type="button" href="/account/settings" class="btn btn-secondary" @onclick="EditEmail" >
                    <i class="fa-solid fa-gear"></i>
                    Change Email
                </button>
            </li>
            <li class="nav-item">
                <button type="button" href="/account/settings" class="btn btn-secondary" @onclick="EditPassword" >
                    <i class="fa-solid fa-gear"></i>
                    Change Password
                </button>
            </li>
        </ul>

        <div>
            <input type="text" bind="@newBiography"/>
            <label></label>
            <button type="submit" @onclick="UpdateBiography">Update Biography</button>
        </div>
    }
    else
    {
        <p> Loading... </p>
    }
</div>

@code {
    private string newBiography{ get; set; }
    private List<Playlist>? userplaylists;
    int usernameIdlogged = 0;
    User? userlogged;
    Playlist? playlist;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            usernameIdlogged = await sessionStorage.GetItemAsync<int>("UsernameLogged");
            if(usernameIdlogged==0)
            {
                //Redirect to login page
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                //Get User in Database
                userlogged = (await _db.GetUser(usernameIdlogged)).First();
                if(userlogged.Plan != PlanPayment.FREE)
                {
                    if(DateTime.Compare(DateTime.ParseExact(userlogged.DateExpirationPlan,"yyyyMMdd",System.Globalization.CultureInfo.InvariantCulture), new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day))  <= 0){
                        await _db.PlanFinished(usernameIdlogged);
                    } 
                }
            }
            StateHasChanged();

        }
    }

    private async void UpdateBiography()
    {

        if (string.IsNullOrEmpty(newBiography)) return; //se conteudo vazio? -> nao alterar
        await JsRuntime.InvokeVoidAsync("alert", newBiography);   
        //guardar para a base de dados
        
    }

    private async void EditBiography()
    {
        NavigationManager.NavigateTo("/account/settings/bio");
    }
    private async void EditEmail()
    {
        NavigationManager.NavigateTo("/account/settings/email");
    }
    private async void EditPassword()
    {
        NavigationManager.NavigateTo("/account/settings/password");
    }

    
}
