@page "/account/playlist/edit"
@using System.Text.RegularExpressions

@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IJSRuntime JsRuntime
@inject IUserData _db
@inject IPlaylistData _dbp
@inject IVideoData _dbv
@inject CommandManager CommandManager
@inject IndexModel IndexModel

<style>
    body {
        background: linear-gradient( rgba(255, 255, 255, 0.4), rgba(255, 255, 255, 0.4) ), url("images/image1.png") no-repeat center center fixed;
        background-size: cover;
    }
</style>

<PageTitle>Manage Playlist</PageTitle>

<div>
    @if (listVideos != null && playlistEdit != null)
    {
        <p class="text-center h1 fw-bold mb-5 mx-1 mx-md-4 mt-4">Edit Playlist: @(playlistEdit.Title)</p>

        <div class="container">
            <div class="row">
                <div class="col-md-6 justify-content-center text-center">

                    <button class="btn btn-secondary btn-md mb-2" aria-label="Edit Playlist Title" @onclick="() => EditPlaylistTitle()">
                        <span class="oi oi-pencil" aria-hidden="true"></span> Edit Title
                    </button>
        
                    <div class="btn-group mb-2">
                        <button class="btn btn-secondary" disabled="@(!canUndo)" @onclick="Undo">
                            <span class="oi oi-action-undo" aria-hidden="true"></span> Undo
                        </button>
                        <button class="btn btn-secondary" disabled="@(!canRedo)" @onclick="Redo">
                            <span class="oi oi-action-redo" aria-hidden="true"></span> Redo
                        </button>
                    </div>

                    <select @onchange="OnValueChanged" class="form-select" aria-label="DefaultSelect">
                        @foreach (EnumPlaylistType value in Enum.GetValues(typeof(EnumPlaylistType))) {
                            if (value == playlistEdit.Type)
                            {
                                <option value="@value" selected>@value</option>
                            }
                            else
                            {
                                <option value="@value">@value</option>
                            }
                        }
                    </select>
        
                    <div class="text-dark mb-1">Count: @listVideos.Count() videos</div>

                    <form @onsubmit="AddVideo">
                        <div class="input-group ps-0 justify-content-center form-group has-error has-danger">
                            <input class="form-control" type="text" style="width: 70%" @bind="newVideo" placeholder="Add video url to playlist. Example: www.youtube.com/watch?v=8DNgdphLvag" />
                            <button type="submit" class="btn btn-success" @onclick="AddVideo">
                            <i class="fa-solid fa-video"></i>
                            Add Url
                            </button>
                            <div class="help-block with-errors">
                            </div>
                        </div>
                    </form>

                </div>
                <div class="col-md-6 justify-content-center text-center">

                    <ul ondragover="event.preventDefault();" class="list-unstyled list-group list-group-flush mt-2 text-center"
	                    ondragstart="event.dataTransfer.setData('', event.target.id);">
	                    @foreach (var item in listVideos.OrderBy(x => x.Order))
	                    {
		                    <li @ondrop="()=>HandleDrop(item)" @key="item.Id" class="list-group-item mb-1">
			                    <div @ondragleave="@(()=> {item.IsDragOver = false;})"
				                    @ondragenter="@(()=>{item.IsDragOver = true;})"
				                    style="@(item.IsDragOver?"border-style: solid none none none; border-color:red;":"")"
				                    @ondragstart="() => draggingModel = item"
				                    @ondragend="()=> draggingModel = null" draggable="true">
                                    <div class="container">
                                        <div class="row d-flex justify-content-between align-items-center">
                                            <div class="col-4 ">
                                                @(item.Order)) <img src="@item.Thumbnail">
                                            </div>
                                            <div class="col-7">
                                                @item.Title <br> Channel Name: @(item.ChannelName)
                                            </div>
                                            <div class="col-1">
                                                <button class="btn btn-danger btn-sm" aria-label="Delete" @onclick="() => DeleteVideo(item)">
                                                    <i class="fa fa-trash"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
		                    </li>
	                    }
                    </ul>

                </div>
            </div>
        </div>
    }
    else
    {
        <p> Loading... </p>
    }
</div>

@code {
    int usernameIdlogged = 0;
    User? userlogged;

    Playlist? playlistEdit;

    List<Video>? listVideos;
    private Video? draggingModel;
    private string? newVideo;

    private bool canUndo;
    private bool canRedo;

    private void Undo() => CommandManager.Undo();
    private void Redo() => CommandManager.Redo();

    protected override void OnInitialized()
    {
        CommandManager.Reset();
        CommandManager.Notify += (s, e) =>
        {
            canUndo = CommandManager.HasUndo;
            canRedo = CommandManager.HasRedo;
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            usernameIdlogged = await sessionStorage.GetItemAsync<int>("UsernameLogged");
            if(usernameIdlogged==0)
            {
                //Redirect to account menu page
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                //Get User in Database
                userlogged = (await _db.GetUser(usernameIdlogged)).First();

                if(userlogged.Plan != PlanPayment.FREE)
                {
                    if(DateTime.Compare(DateTime.ParseExact(userlogged.DateExpirationPlan.Trim(),"yyyyMMdd",System.Globalization.CultureInfo.InvariantCulture), new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day)) <= 0)
                        await _db.PlanFinished(usernameIdlogged);
                }
                //Get Playlist in Database
                int playlistStorage = await sessionStorage.GetItemAsync<int>("PlaylistChosen");
                if(playlistStorage == -1)
                {
                    //Create Playlist
                    Playlist playlistWithId = (await _dbp.GetLatestPlaylistInserted(new Playlist(), userlogged)).First();
                    await _dbp.UpdateTitle(playlistWithId);
                    playlistEdit = (await _dbp.GetPlaylist(playlistWithId.Id)).First();
                    await sessionStorage.SetItemAsync("PlaylistChosen", playlistEdit.Id);

                    listVideos = new();
                }
                else if(playlistStorage != 0)
                {
                    //Edit Playlist
                    playlistEdit = (await _dbp.GetPlaylist(playlistStorage)).First();

                    //Get Videos of Playlist
                    List<PlaylistVideos> videosAssociatedPlaylist = await _dbp.VideosIdInPlaylist(playlistEdit);
                    if(videosAssociatedPlaylist.Count == 0)
                    {
                        listVideos = new();
                    }
                    else
                    {
                        listVideos = await _dbp.VideosPlaylist(videosAssociatedPlaylist);
                    }
                }
                else
                {
                    //Redirect to account menu page
                    NavigationManager.NavigateTo("/login");
                }
            }

            StateHasChanged();
        }
    }

    private void HandleDrop(Video landingModel)
    {//landing model -> where the drop happened
        if (draggingModel is null) return;
        List<Video> oldListVideos = listVideos.OrderBy(x=>x.Order).ToList();
        int originalOrderLanding = landingModel.Order;//keep the original order for later
                                                      //increase model under by 1
        listVideos.Where(x => x.Order >= landingModel.Order).ToList().ForEach(x => x.Order++);
        draggingModel.Order = originalOrderLanding;//replace landing model
        int ii = 0;
        foreach (var model in listVideos.OrderBy(x=>x.Order).ToList())
        {
            model.Order = ii++;//keep the numbers from 0 to size-1
            model.IsDragOver = false;//remove drag over. 
        }

        //update video placement
        if (oldListVideos.SequenceEqual(listVideos.OrderBy(x=>x.Order).ToList())) return; //erro
        var command = new CommandChangeOrderListVideo(listVideos.OrderBy(x=>x.Order).ToList(), oldListVideos, _dbp, _dbv, listVideos, playlistEdit);
        CommandManager.Execute(command);
    }

    private async void EditPlaylistTitle()
    {
        string prompted = await JsRuntime.InvokeAsync<string>("prompt", "Insert new playlist title:");
        if(!string.IsNullOrWhiteSpace(prompted))
        {
            if (prompted.Length > 16) return;
            List<Playlist> userplaylists = await _dbp.GetClientPlaylists(userlogged);

            playlistEdit.Title = prompted;
            Playlist playlistNewTitle = new Playlist() {Id = playlistEdit.Id, Title = prompted};
            bool containsItem = userplaylists.Any(item => item.Title == playlistNewTitle.Title && item.PersonId == userlogged.Id);
            if (containsItem) return;
            await _dbp.UpdateNewTitle(playlistNewTitle);
        }
    }

    private void OnValueChanged(ChangeEventArgs e)
    {
        var selectedType = e.Value.ToString();
        _dbp.UpdateType(playlistEdit, selectedType);
    }

    private void AddVideo()
    {
        if (string.IsNullOrWhiteSpace(newVideo)) return;
        var newVideoId = string.Empty;
        if (newVideo.Contains("www.youtube.com/watch?v="))
        {
            var query = HttpUtility.ParseQueryString((new Uri(newVideo)).Query);
            if (query.AllKeys.Contains("v"))
            {
                string newVideoIdVerify = query["v"];
                if(newVideoIdVerify.Length == 11)
                {
                    newVideoId = newVideoIdVerify;
                }
            }
        }

        if (newVideoId == string.Empty) return;
        if (listVideos.Count() >= userlogged.MaxVideos()) return;

        //Get Video Title, ... From newVideoId
        List<Video> videosObtained = IndexModel.OnGet(newVideoId);
        if(videosObtained.Count() <= 0) return;
        Video firstNewVideo = videosObtained.First();
        firstNewVideo.Order = listVideos.Count;

        var command2 = new CommandAddListVideo(listVideos, firstNewVideo, _dbv, playlistEdit);
        CommandManager.Execute(command2);
        newVideo = null;
        
    }

    private void DeleteVideo(Video videoToRemove)
    {
        if (videoToRemove == null) return;
        var command1 = new CommandRemoveListVideo(listVideos, videoToRemove, _dbv, playlistEdit);
        CommandManager.Execute(command1);
    }
}
