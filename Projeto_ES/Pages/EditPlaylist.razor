@page "/account/playlist/edit"
@using System.Text.RegularExpressions

@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IJSRuntime JsRuntime
@inject IUserData _db
@inject IPlaylistData _dbp
<!-- inject CommandManager CommandManager -->

<style>
    body {
        background: linear-gradient( rgba(255, 255, 255, 0.4), rgba(255, 255, 255, 0.4) ), url("images/image1.png") no-repeat center center fixed;
        background-size: cover;
    }
</style>

<PageTitle>Manage Playlist</PageTitle>

<div>
    @if (listVideos != null && playlistEdit != null)
    {
        <p class="text-center h1 fw-bold mb-5 mx-1 mx-md-4 mt-4">Edit Playlist: @(playlistEdit.Title)</p>
        <!--
        <div class="btn-group mb-2">
            <button class="btn btn-secondary" disabled="@(!canUndo)" @onclick="Undo">
                <span class="oi oi-action-undo" aria-hidden="true"></span> Undo
            </button>
            <button class="btn btn-secondary" disabled="@(!canRedo)" @onclick="Redo">
                <span class="oi oi-action-redo" aria-hidden="true"></span> Redo
            </button>
        </div>
        -->
        <div class="text-dark">Count: @listVideos.Count() videos</div>

        <form @onsubmit="AddVideo">
            <div class="input-group ps-0 justify-content-center form-group has-error has-danger">
                <input class="form-control" type="text" style="width: 70%" @bind="newVideo" placeholder="Add video url to playlist. Example: www.youtube.com/watch?v=8DNgdphLvag" />
                <button type="submit" class="btn btn-success">
                <i class="fa-solid fa-video"></i>
                Add Url
                </button>
                <div class="help-block with-errors">
                </div>
            </div>
        </form>

        <ul ondragover="event.preventDefault();" class="list-unstyled mt-2"
	        ondragstart="event.dataTransfer.setData('', event.target.id);">
	        @foreach (var item in listVideos.OrderBy(x => x.Order))
	        {
		        <li @ondrop="()=>HandleDrop(item)" @key="item" class="list-video">
			        <div @ondragleave="@(()=> {item.IsDragOver = false;})"
				        @ondragenter="@(()=>{item.IsDragOver = true;})"
				        style="@(item.IsDragOver?"border-style: solid none none none; border-color:red;":"")"
				        @ondragstart="() => draggingModel = item"
				        @ondragend="()=> draggingModel = null" draggable="true">@item.Order - @item.Url
                        <button class="btn btn-danger btn-sm" aria-label="Delete" @onclick="() => DeleteVideo(item)">
                            <i class="fa fa-trash"></i>
                        </button>
                    </div>
		        </li>
	        }
        </ul>
    }
    else
    {
        <p> Loading... </p>
    }
</div>

@code {
    int usernameIdlogged = 0;
    User? userlogged;
    Playlist? playlistEdit;

    List<Video>? listVideos;
    private Video? draggingModel;
    private string? newVideo;

    private bool canUndo;
    private bool canRedo;
    //var macro = new MacroCommand();

    //private void Undo() => CommandManager.Undo();
    //private void Redo() => CommandManager.Redo();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            usernameIdlogged = await sessionStorage.GetItemAsync<int>("UsernameLogged");
            if(usernameIdlogged==0)
            {
                //Redirect to account menu page
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                //Get User in Database
                userlogged = (await _db.GetUser(usernameIdlogged)).First();
                //Get Playlist in Database
                int playlistStorage = await sessionStorage.GetItemAsync<int>("PlaylistChosen");
                if(playlistStorage == 0)
                {
                    //Create Playlist
                    Playlist playlistWithId = (await _dbp.GetLatestPlaylistInserted(new Playlist(), userlogged)).First();
                    await _dbp.UpdateTitle(playlistWithId);
                    playlistEdit = (await _dbp.GetPlaylist(playlistWithId.Id)).First();

                    listVideos = new();
                }
                else
                {
                    //Edit Playlist
                    playlistEdit = (await _dbp.GetPlaylist(playlistStorage)).First();

                    //Setup Command
                    /*
                    CommandManager.Reset();
                    CommandManager.Notify += (s, e) =>
                        {
                        canUndo = CommandManager.HasUndo;
                        canRedo = CommandManager.HasRedo;
                    };
                    */

                    //Get Videos of Playlist
                    List<PlaylistVideos> videosAssociatedPlaylist = await _dbp.VideosIdInPlaylist(playlistEdit);
                    if(videosAssociatedPlaylist.Count == 0)
                    {
                        listVideos = new();
                    }
                    else
                    {
                        listVideos = await _dbp.VideosPlaylist(videosAssociatedPlaylist);
                    }
                }
            }

            StateHasChanged();
        }
    }

    private void HandleDrop(Video landingModel)
    {//landing model -> where the drop happened
        if (draggingModel is null) return;
        int originalOrderLanding = landingModel.Order;//keep the original order for later
                                                      //increase model under by 1
        listVideos.Where(x => x.Order >= landingModel.Order).ToList().ForEach(x => x.Order++);
        draggingModel.Order = originalOrderLanding;//replace landing model
        int ii = 0;
        foreach (var model in listVideos.OrderBy(x=>x.Order).ToList())
        {
            model.Order = ii++;//keep the numbers from 0 to size-1
            model.IsDragOver = false;//remove drag over. 
        }
    }

    private void AddVideo()
    {
        if (string.IsNullOrEmpty(newVideo)) return;
        string newVideoId = string.Empty;

        Match youtubeMatch = (new Regex(@"youtu(?:\.be|be\.com)/(?:.*v(?:/|=)|(?:.*/)?)([a-zA-Z0-9-_]+)")).Match(newVideo);
        if (youtubeMatch.Success)
        {
            newVideoId = HttpUtility.ParseQueryString(new Uri(newVideo).Query)["v"];
        }

        Console.WriteLine($"id: {newVideoId}");

        if (newVideoId == string.Empty) return;
        if (listVideos.Count() >= userlogged.MaxVideos()) return;
        /*
        var macro = new MacroCommand();
        var command1 = new CommandCreateListItem(newItem);
        command1.Execute();
        macro.Add(command1);
        var command2 = new CommandAddListItem(items, command1.Item);
        macro.Add(command2);
        CommandManager.Execute(macro);
        newItem = null;
        */
    }

    private void DeleteVideo(Video videoToRemove)
    {
        if (videoToRemove == null) return;
        //var command1 = new CommandDeleteListItem(listVideos, videoToRemove);
        //CommandManager.Execute(command1);
    }
}
