@page "/login"
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IUserData _db
@inject IJSRuntime JsRuntime

<style>
    body {
        background: linear-gradient( rgba(255, 255, 255, 0.4), rgba(255, 255, 255, 0.4) ), url("images/image1.png") no-repeat center center fixed;
        background-size: cover;
    }
</style>

<PageTitle>Login</PageTitle>

    <div class="card-body p-md-3">
        <div class="row justify-content-center">
            <div class="col-md-10 col-lg-6 col-xl-5 order-2 order-lg-1">

            <p class="text-center h1 fw-bold mb-5 mx-1 mx-md-4 mt-4">Login</p>

            <EditForm Model="@user" OnSubmit="@HandleValidSubmit" class="mx-1 mx-md-4">
                <DataAnnotationsValidator />

                <div class="d-flex flex-row align-items-center mb-4">
                <i class="fas fa-user fa-lg me-3 fa-fw"></i>
                <div class="form-outline flex-fill mb-0">
                    <InputText id="form3Example1c" class="form-control" placeholder="Username" required maxlength="16" @bind-Value="user.Username"/>
                    <ValidationMessage For="() => user.Username" />
                </div>
                </div>

                <div class="d-flex flex-row align-items-center mb-4">
                <i class="fas fa-lock fa-lg me-3 fa-fw"></i>
                <div class="form-outline flex-fill mb-0">
                    <InputText type="password" id="form3Example4c" class="form-control" placeholder="Password" required maxlength="16" @bind-Value="user.Password"/>
                    <ValidationMessage For="() => user.Password" />
                </div>
                </div>   
                  
                <div class="d-flex justify-content-center mb-5">
                <label>Don't have an account?<br/><a href="/signup" class="d-flex justify-content-center">Sign up HERE!</a></label>
                </div>

                <div class="d-flex justify-content-center mx-4 mb-3 mb-lg-4">
                <button type="submit" class="btn btn-primary btn-lg">Login</button>
                </div>

            </EditForm>

            </div>
        </div>
    </div>

@code {
    private User user = new() { };
    private List<User> users;
    string usernamelogged;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            users = await _db.GetUsers();
            usernamelogged = await sessionStorage.GetItemAsync<string>("UsernameLogged");
            if(usernamelogged!=null)
            {
                //Redirect to account menu page
                NavigationManager.NavigateTo("/account/menu");
            }

            StateHasChanged();
        }
    }

    private async void HandleValidSubmit()
    {
        // Process to validate user database
        bool isUserValid = false;
        users = await _db.GetUsers();
        foreach(var usercolumn in users)
        {
            if(usercolumn.Username.Trim() == user.Username.Trim() && usercolumn.Password.Trim() == user.Password.Trim())
            {
                isUserValid = true;
                break;
            }
        }

        if(isUserValid)
        {
            //Add session validation
            await sessionStorage.SetItemAsync("UsernameLogged", user.Username);

            //Redirect to account menu page
            NavigationManager.NavigateTo("/account/menu", true);
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Incorrect Username or Password!");
        }
    }
}