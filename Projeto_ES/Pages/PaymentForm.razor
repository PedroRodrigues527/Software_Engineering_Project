@page "/account/settings/payment"
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IJSRuntime JsRuntime
@inject IUserData _db
@inject IPlaylistData _dbp

<style>
    body {
        background: linear-gradient( rgba(255, 255, 255, 0.4), rgba(255, 255, 255, 0.4) ), url("images/image1.png") no-repeat center center fixed;
        background-size: cover;
    }
</style>

<PageTitle>Plan Payment</PageTitle>

<div>
    @if (userlogged != null)
    {
        <p class="text-center h1 fw-bold mb-5 mx-1 mx-md-4 mt-4">Settings</p>

        <div class="container">
            <div class="row">
                <div class="col-md-6 justify-content-center text-center">
                    <ul class="list-unlisted mt-2">
                        <div class="nav-item mb-2">
                             <button type="button" class="btn btn-primary btn-lg" @onclick="EditBio">
                                <i class="fa-solid fa-user-pen"></i>
                                Change Biography
                            </button>
                        </div>
                        <div class="nav-item mb-2">
                            <button type="button" class="btn btn-primary btn-lg" @onclick="EditEmail" >
                                <i class="fa-solid fa-at"></i>
                                Change Email
                            </button>
                        </div>
                        <div class="nav-item mb-2">
                            <button type="button" class="btn btn-primary btn-lg" @onclick="EditPassword" >
                                <i class="fa-solid fa-key"></i>
                                Change Password
                            </button>
                        </div>
                        <div class="nav-item mb-2">
                            <button type="button" class="btn btn-primary btn-lg" disabled >
                                <i class="fa-solid fa-euro-sign"></i>
                                Upgrade Plan
                            </button>
                        </div>
                    </ul>
                </div>
                <div class="col-md-6 justify-content-center text-center">
                   <EditForm Model="@card" OnSubmit="@HandleValidSubmit" class="mx-1 mx-md-4">
                      <DataAnnotationsValidator />

                      <div class="d-flex flex-row align-items-center mb-4">
                          <label for="staticEmail" class="col-sm-2 col-form-label">Plan Account:</label>
                            <div class="col-sm-10">
                                <input type="text" readonly class="form-control-plaintext text-center" id="staticPlanAccount" value="@userlogged.Plan">
                            </div>
                      </div>

                      <select @onchange="OnValueChanged" class="form-select mb-4" aria-label="SelectPlan" required>
                          <option value=""></option>
                        @foreach (PlanPayment value in Enum.GetValues(typeof(PlanPayment))) {
                            if(((int)userlogged.Plan) < (int)value && value != userlogged.Plan)
                            {
                                <option value="@value">@value</option>
                            }
                        }
                      </select>

                      <div class="d-flex flex-row align-items-center mb-4">
                        <i class="fas fa-credit-card fa-lg me-3 fa-fw"></i>
                        <div class="form-outline flex-fill mb-0">
                          <InputNumber id="form3Example1c" class="form-control" placeholder="Credit Card Number" required @bind-Value="card.Number"/>
                          <ValidationMessage For="() => card.Number" />
                        </div>
                      </div>
                      <div class="d-flex flex-row align-items-center mb-4">
                        <i class="fas fa-user fa-lg me-3 fa-fw"></i>
                        <div class="form-outline flex-fill mb-0">
                          <InputText id="form3Example1c" class="form-control" placeholder="Holder Name" required @bind-Value="card.HolderName"/>
                          <ValidationMessage For="() => card.HolderName" />
                        </div>
                      </div>

                      <div class="d-flex flex-row align-items-center mb-4">
                        <i class="fas fa-calendar fa-lg me-3 fa-fw"></i>
                        <div class="form-outline flex-fill mb-0">
                          <InputText id="form3Example1c" class="form-control" placeholder="Expiration Date. Format: MM/yyyy" required maxlength="7" @bind-Value="card.ExpirationDate"/>
                          <ValidationMessage For="() => card.ExpirationDate" />
                        </div>
                      </div>

                      <div class="d-flex flex-row align-items-center mb-4">
                        <i class="fas fa-lock fa-lg me-3 fa-fw"></i>
                        <div class="form-outline flex-fill mb-0">
                          <InputNumber type="password" id="form3Example4c" class="form-control" placeholder="PIN" required maxlength="4" max="9999" @bind-Value="card.Pin"/>
                          <ValidationMessage For="() => card.Pin "/>
                        </div>
                      </div>


                      <div class="d-flex justify-content-center mx-4 mb-3 mb-lg-4">
                        @if(countOptions > 0 && chosenPlanString != null)
                        {
                            <button type="submit" class="btn btn-primary btn-lg">Confirm Payment (@(BILL*((int)chosenPlan - (int)userlogged.Plan)) - 1 year)</button>
                        }
                        else
                        {
                            <button type="submit" class="btn btn-primary btn-lg" disabled>Choose Type of Plan</button>
                        }
                      </div>

                    </EditForm>
                </div>
            </div>
        </div>
        <button type="button" class="btn btn-secondary btn-md" @onclick="GoBack">&laquo; Go Back</button>
    }
    else
    {
        <p> Loading... </p>
    }
</div>

@code {
    public const double BILL = 11.99;
    int usernameIdlogged = 0;
    User? userlogged;
    private List<User>? users;
    string? chosenPlanString;
    PlanPayment chosenPlan;
    static int countOptions = 0;

    private CreditCard card = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            usernameIdlogged = await sessionStorage.GetItemAsync<int>("UsernameLogged");
            if(usernameIdlogged==0)
            {
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                users = await _db.GetUsers();
                userlogged = (await _db.GetUser(usernameIdlogged)).First();
                if(userlogged.Plan != PlanPayment.FREE)
                {
                    if(DateTime.Compare(DateTime.ParseExact(userlogged.DateExpirationPlan.Trim(),"yyyyMMdd",System.Globalization.CultureInfo.InvariantCulture), new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day)) <= 0)
                        await _db.PlanFinished(usernameIdlogged);
                }

                foreach (PlanPayment value in Enum.GetValues(typeof(PlanPayment))) {
                    if(((int)userlogged.Plan) < (int)value && value != userlogged.Plan)
                    {
                        countOptions++;
                    }
                }

                await sessionStorage.RemoveItemAsync("PlaylistChosen");
            }
            StateHasChanged();

        }
    }

    private async void HandleValidSubmit()
    {
        if (string.IsNullOrWhiteSpace(chosenPlanString)) return;
        List<CreditCard> cardList = _db.GetCreditCard(card);
        CreditCard cardDataBase = cardList.FirstOrDefault();
        if (cardDataBase != null)
        {
            if (cardDataBase.IsPaymentPositive(BILL*((int)chosenPlan - (int)userlogged.Plan)))
            {
                DateTime currentDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
                currentDate = currentDate.AddYears(1);
                string expirationDateString = currentDate.ToString("yyyyMMdd");
                double remainingBalance = (cardDataBase.Balance - (double)(BILL * ((int)chosenPlan - (int)userlogged.Plan)));

                _db.Payment(cardDataBase, Convert.ToDecimal(remainingBalance), chosenPlanString, userlogged, expirationDateString);

                await JsRuntime.InvokeVoidAsync("alert", "Payment succesfull!");

                NavigationManager.NavigateTo("/account/settings/payment", true);
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", "Insuficient Balance!");
            }
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Credit card unknown!");
        }
    }

    private void OnValueChanged(ChangeEventArgs e)
    {
        if(string.IsNullOrWhiteSpace(e.Value.ToString()))
        {
            chosenPlanString = null;
        }
        else
        {
            chosenPlanString = e.Value.ToString();
            chosenPlan = (PlanPayment)System.Enum.Parse(typeof(PlanPayment), chosenPlanString);
        }
    }

    private void EditEmail()
    {
        NavigationManager.NavigateTo("/account/settings/email");
    }
    private void EditBio()
    {
        NavigationManager.NavigateTo("/account/settings/bio");
    }
    private void EditPassword()
    {
        NavigationManager.NavigateTo("/account/settings/password");
    }

    private async void GoBack()
    {
        await JsRuntime.InvokeVoidAsync("history.go", -1);
    }

}
