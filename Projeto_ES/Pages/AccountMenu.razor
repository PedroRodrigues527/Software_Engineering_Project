@page "/account/menu"
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IJSRuntime JsRuntime
@inject IUserData _db
@inject IPlaylistData _dbp

<style>
    body {
        background: linear-gradient( rgba(255, 255, 255, 0.4), rgba(255, 255, 255, 0.4) ), url("images/image1.png") no-repeat center center fixed;
        background-size: cover;
    }
</style>

<PageTitle>Account Menu</PageTitle>

<div>
    @if (userlogged != null)
    {
        <div class="container">
            <div class="row">
                <div class="col-md-6 justify-content-center text-center">
                    <p class="text-center h1 fw-bold mb-5 mx-1 mx-md-4 mt-4">Your playlists</p>
                    <ul class="list-group">
                        @if (userplaylists.Count > 0)
                        {
                            @for (int i = 0; i < userplaylists.Count; i++)
                            {
                                var j = i;
                                <!--
                                <li class="list-item">
                                    <div class="form-check">
                                        <label class="form-check-label" for="item-@j">@userplaylists[j].Title</label>
                                    </div>
                                    <div>
                                        <button class="btn btn-secondary btn-sm" aria-label="Edit" @onclick="() => EditPlaylist(userplaylists[j])">
                                            <span class="oi oi-pencil" aria-hidden="true"></span>
                                        </button>
                                        
                                        <button class="btn btn-danger btn-sm" aria-label="Delete" @onclick="() => DeleteItem(userplaylists[j])">
                                        <span class="oi oi-trash" aria-hidden="true"></span>
                                        </button>
                                        
                                </div>
                                </li>
                                -->
                                <li class="list-group-item-primary d-flex justify-content-between align-items-center ps-5 pe-5">
                                @userplaylists[j].Title.Trim()
                                <span class="badge badge-primary badge-pill">@userplaylists[j].DataCreation</span>
                                <button class="btn btn-secondary btn-sm" aria-label="Edit" @onclick="() => EditPlaylist(userplaylists[j])">
                                    <span class="oi oi-pencil" aria-hidden="true"></span>
                                </button>
                                <button class="btn btn-secondary btn-sm" aria-label="Delete" @onclick="() => RemovePlaylist(userplaylists[j])">
                                    <span class="oi oi-trash" aria-hidden="true"></span>
                                </button>
                                </li>
                            }
                        }
                        else
                        {
                            <p>No Playlists Created. Create one now!</p>
                        }
                    </ul>
                </div>
                <div class="col-md-6 justify-content-center text-center">
                    <p class="text-center h1 fw-bold mb-5 mx-1 mx-md-4 mt-4">Search playlists</p>
                </div>
            </div>
        </div>
    }
    else
    {
        <p> Loading... </p>
    }
</div>

@code {
    private List<Playlist>? userplaylists;
    string? usernamelogged;
    User? userlogged;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            usernamelogged = await sessionStorage.GetItemAsync<string>("UsernameLogged");
            if(usernamelogged==null)
            {
                //Redirect to login page
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                //Get User in Database
                userlogged = (await _db.GetUser(usernamelogged)).First();
                //Get User's Playlists
                userplaylists = await _dbp.GetClientPlaylists(userlogged);
            }

            StateHasChanged();
        }
    }

    private async void EditPlaylist(Playlist playlistedit)
    {
        //Add playlist in session storage
        await sessionStorage.SetItemAsync("PlaylistChosen", playlistedit);
        //Redirect to edit playlist page
        NavigationManager.NavigateTo("/account/playlist/create");
    }

    private async void RemovePlaylist(Playlist playlistremoved)
    {
        bool confirmlogout = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete playlist {playlistremoved.Title.Trim()}?");
        if(confirmlogout == true)
        {
            //Remove playlist 
            await _dbp.DeletePlaylist(playlistremoved);
            userplaylists.Remove(playlistremoved);

            NavigationManager.NavigateTo("/account/menu", true);
        }
    }
}
