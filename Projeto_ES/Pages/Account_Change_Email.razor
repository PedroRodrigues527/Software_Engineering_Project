@page "/account/settings/email"
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IJSRuntime JsRuntime
@inject IUserData _db
@inject IPlaylistData _dbp

<style>
    body {
        background: linear-gradient( rgba(255, 255, 255, 0.4), rgba(255, 255, 255, 0.4) ), url("images/image1.png") no-repeat center center fixed;
        background-size: cover;
    }
</style>

<PageTitle>Changing Email</PageTitle>

<div>
    @if (userlogged != null)
    {
        <p class="text-center h1 fw-bold mb-5 mx-1 mx-md-4 mt-4">Settings</p>

        <div class="container">
            <div class="row">
                <div class="col-md-6 justify-content-center text-center">
                    <ul class="list-unlisted mt-2">
                        <div class="nav-item mb-2">
                            <button type="button" class="btn btn-primary btn-lg" @onclick="EditBio" >
                                <i class="fa-solid fa-at"></i>
                                Change Biography
                            </button>
                        </div>
                        <div class="nav-item mb-2">
                             <button type="button" class="btn btn-primary btn-lg" disabled>
                                <i class="fa-solid fa-user-pen"></i>
                                Change Email
                            </button>
                        </div>
                        <div class="nav-item mb-2">
                            <button type="button" class="btn btn-primary btn-lg" @onclick="EditPassword" >
                                <i class="fa-solid fa-key"></i>
                                Change Password
                            </button>
                        </div>
                    </ul>
                </div>
                <div class="col-md-6 justify-content-center text-center">
                    <EditForm Model="@user" OnSubmit="@HandleValidSubmit" class="mx-1 mx-md-4">
                      <DataAnnotationsValidator />

                      <div class="d-flex flex-row align-items-center mb-4">
                          <label for="staticEmail" class="col-sm-2 col-form-label">Current Email:</label>
                            <div class="col-sm-10">
                                @if(userlogged.Email == null)
                                {
                                    <input type="text" readonly class="form-control-plaintext text-center" id="staticBiography" value="">
                                }
                                else
                                {
                                    <input type="text" readonly class="form-control-plaintext text-center" id="staticBiography" value="@userlogged.Email">
                                }
                            </div>
                      </div>

                      <div class="d-flex flex-row align-items-center mb-4">
                        <i class="fas fa-user fa-lg me-3 fa-fw"></i>
                        <div class="form-outline flex-fill mb-0">
                          <InputTextArea id="form3Example1c" class="form-control" placeholder="New Email" required maxlength="150" @bind-Value="user.Email"/>
                          <ValidationMessage For="() => user.Email" />
                        </div>
                      </div>
                      

                      <div class="d-flex flex-row align-items-center mb-4">
                        <i class="fas fa-lock fa-lg me-3 fa-fw"></i>
                        <div class="form-outline flex-fill mb-0">
                          <InputText type="password" id="form3Example4c" class="form-control" placeholder="Current Password" required maxlength="16" @bind-Value="user.Password"/>
                          <ValidationMessage For="() => user.Password" />
                        </div>
                      </div>

                      <div class="d-flex flex-row align-items-center mb-4">
                        <i class="fas fa-key fa-lg me-3 fa-fw"></i>
                        <div class="form-outline flex-fill mb-0">
                          <InputText type="password" id="form3Example4cd" class="form-control" placeholder="Confirm Password" required maxlength="16" @bind-Value="user.ConfirmPassword"/>
                          <ValidationMessage For="() => user.ConfirmPassword" />
                        </div>
                      </div>

                      <div class="d-flex justify-content-center mx-4 mb-3 mb-lg-4">
                        <button type="submit" class="btn btn-primary btn-lg">Update Email</button>
                      </div>

                    </EditForm>
                </div>
            </div>
        </div>
    }
    else
    {
        <p> Loading... </p>
    }
</div>

@code {
    int usernameIdlogged = 0;
    User? userlogged;
    private List<User>? users;

    private User? user = new() { };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            usernameIdlogged = await sessionStorage.GetItemAsync<int>("UsernameLogged");
            if(usernameIdlogged==0)
            {
                //Redirect to login page
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                users = await _db.GetUsers();
                //Get User in Database
                userlogged = (await _db.GetUser(usernameIdlogged)).First();
                if(userlogged.Plan != PlanPayment.FREE)
                {
                    if(DateTime.Compare(DateTime.ParseExact(userlogged.DateExpirationPlan.Trim(),"yyyyMMdd",System.Globalization.CultureInfo.InvariantCulture), new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day)) <= 0)
                        await _db.PlanFinished(usernameIdlogged);
                }
                await sessionStorage.RemoveItemAsync("PlaylistChosen");
            }
            StateHasChanged();

        }
    }

    private async void HandleValidSubmit()
    {
        if (user.Password.Equals(user.ConfirmPassword) && userlogged.Password.Trim() == user.Password.Trim()  && !string.IsNullOrWhiteSpace(user.Email) )
        {
            user.Id = userlogged.Id;
            // Process to save user data
            await _db.ChangeEmail(user);

            await JsRuntime.InvokeVoidAsync("alert", "Email Changed!");

            //Redirect to login page
            NavigationManager.NavigateTo("/account/settings/email", true);
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Incorrect Password!");
        }
    }

    private void EditBio()
    {
        NavigationManager.NavigateTo("/account/settings/bio");
    }
    private void EditPassword()
    {
        NavigationManager.NavigateTo("/account/settings/password");
    }

    
}
