@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IJSRuntime JsRuntime
@inject IUserData _db

<link rel="stylesheet" href="css/font-awesome/css/fontawesome.min.css" />

<nav class="navbar navbar-expand-sm bg-dark navbar-dark ps-5 justify-content-between">
@if (userlogged == null)
    {
    <!-- Brand/logo -->
    <a class="navbar-brand" href="/">- CreateToView -</a>
    <!-- Links -->
    <ul class="navbar-nav pe-5">
        <li class="nav-item">
            <a class="nav-link" href="/">Home</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="/signup">Sign Up</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="/login">Login</a>
        </li>
    </ul>
    }
    else
    {
    <a class="navbar-brand" href="/account/menu">- CreateToView -</a>
        <ul class="navbar-nav pe-5">
            <li class="nav-item pe-2">
                <button type="button" @onclick="Logout" class="btn btn-danger">
                    <i class="fa fa-sign-out"></i>
                    Logout
                </button>
            </li>
            <li class="nav-item">
                <button type="button" href="/account/settings" class="btn btn-secondary" @onclick="RedirectToSettings" >
                    <i class="fa-solid fa-gear"></i>
                    Settings
                </button>
            </li>
            <li class="nav-item">
                <a class="nav-link" >@userlogged.Username</a>
            </li>
            <li class="nav-item dropdown">
                <img src="https://avatars.dicebear.com/api/identicon/@(userlogged.Username).svg" class="img-fluid rounded mx-auto d-block dropdown-toggle" alt="Avatar Image" width="37" height="37" id="navbarDropdownMenuLink" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdownMenuLink">
                    <li><p class="center-text ms-2">Plan Account: @userlogged.Plan</p></li>
                    @if (userlogged.Plan != PlanPayment.FREE)
                    {
                        <li><p class="center-text ms-2" >Date Expiration: @userlogged.DateExpirationPlan.Trim().Substring(6)/@userlogged.DateExpirationPlan.Trim().Substring(4,2)/@userlogged.DateExpirationPlan.Trim().Substring(0,4)</p></li>
                    }
                </ul>
            </li>
        </ul>
    }
</nav>

@code {
    int userIdlogged = 0;
    User userlogged;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userIdlogged = await sessionStorage.GetItemAsync<int>("UsernameLogged");
            if (userIdlogged != 0)
            {
                userlogged = (await _db.GetUser(userIdlogged)).First();
            }

            StateHasChanged();
        }
    }
    private async void Logout()
    {
        bool confirmlogout = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to logout?");
        if(confirmlogout)
        {
            //Remove session validation
            await sessionStorage.RemoveItemAsync("UsernameLogged");
            await sessionStorage.RemoveItemAsync("PlaylistChosen");

            //Redirect to login page
            NavigationManager.NavigateTo("/login", true);
        }
    }

    private async void RedirectToSettings()
    {
        NavigationManager.NavigateTo("/account/settings", true);
    }
}